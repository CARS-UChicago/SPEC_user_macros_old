# traj_scans1.mac
# Scan macros for trajectory scanning with EPICS and the MM4005
#
#               Mark Rivers
#               August 20, 2000
#
# This file provides replacements for the following macros in the standard SPEC
# macro files "scans.mac" and "scans1.mac"
#   _ascan
#   mesh
#   hklscan
#   hklmesh
#   _hklline
#   _scanabort
#   resume
#   _loop
#
# It adds the following new macros:
#   traj_index
#   traj_build
#   traj_exec
#   traj_read_counts
#   traj_read_actual
#
#########################################################################

#########################################################################
#
#                 SCAN MACROS and SCAN-HELPER MACROS
#

#########################################################################
#
#  _ascan scans the number of motors given by _nm.
#  The arrays _m[], _s[], _f[] and _d[] contain the motor
#  numbers, start, finish and step sizes for each of the
#  scanned motors.  The macros ascan, a2scan, a3scan and
#  a4scan call _ascan.
#
def _ascan '
        if (_n1 <= 0) {
                eprint "Intervals <= 0"
                exit
        } ;
        {
         local i tm
         for (i=0;i<_nm;i++) {
                 _bad_lim = 0
                 _chk_lim _m[i] _s[i]
                 _chk_lim _m[i] _f[i]
                 if (_bad_lim) exit;
                 if (traj_index(i) < 0) exit
         }
        }
        HEADING=_nm>1? sprintf("a%dscan ", _nm):"ascan "
        {
         local i
         for (i=0;i<_nm;i++) {
                HEADING=sprintf("%s%s",HEADING,sprintf(" %s %g %g ",\
                        motor_mne(_m[i]),_s[i],_f[i]))
                _d[i] = (_f[i] - _s[i]) / _n1
         }
        }
        HEADING=sprintf("%s %g %g",HEADING,_n1,_ctime)
        _cols=_nm+_hkl_col
        X_L = motor_name(_m[0])
        Y_L = cnt_name(DET)
        _sx = _s[0]; _fx = _f[0]
        _stype = 1|(_nm<<8)
        FPRNT=PPRNT=VPRNT=""
        {
         local i
         for (i=0;i<_nm;i++) {
             FPRNT=sprintf("%s%s  ",FPRNT,motor_name(_m[i]))
             PPRNT=sprintf("%s%8.8s ",PPRNT,motor_name(_m[i]))
             VPRNT=sprintf("%s%9.9s ",VPRNT,motor_name(_m[i]))
         }
        }
        FPRNT=sprintf("%s%s  ",FPRNT,_hkl_sym1)
        scan_head
        PFMT=sprintf("%%s%%8.%df ",UP)
        VFMT=sprintf("%%s%%9.%df ",UP)
        def _scan_on \'
        {
         local i j k dp dt
         # Move to start position of scan
         for (i=0;i<_nm;i++) A[_m[i]] = _s[i]
         scan_move
         # Initialize trajectory
         traj_init
         # Build trajectory
         for (i=0;i<_nm;i++) {
            dp = (_f[i] - _s[i]) / MIN_TRAJ_ELEMENTS
            k = _traj_motor[i]
            _traj_move[k] = 1
            for (j=0;j<MIN_TRAJ_ELEMENTS;j++) {
                _traj_pos[k][j] = dp
            }
         }
         dt = _n1 * _ctime / MIN_TRAJ_ELEMENTS
         for (j=0;j<MIN_TRAJ_ELEMENTS;j++) _traj_time[j] = dt
         traj_build MIN_TRAJ_ELEMENTS _n1
         # Execute trajectory
         traj_exec
         # Read counts
         traj_read_counts COUNTERS _n1
         # If TRAJ_USE_ACTUAL is true then read actual positions
         if (TRAJ_USE_ACTUAL != 0) traj_read_actual _n1
         # Print, save and plot results
         for (NPTS=0; NPTS < _n1; NPTS++) {
            if (TRAJ_USE_ACTUAL) {
                for (i=0;i<_nm;i++)
                                A[_m[i]] = _traj_actual[_traj_motor[i]][NPTS]
            } else {
                # Note the +1 in when the sync pulse occured
                for (i=0;i<_nm;i++)
                                A[_m[i]] = _s[i] + (NPTS+1) * _d[i]
            }
            for (i=0;i<COUNTERS;i++) S[i]=_traj_counts[i][NPTS]
            # Need to find the right way to determine clocks per second
            S[sec] = S[sec]/1.e7
            FPRNT=PPRNT=VPRNT=""
            for (i=0;i<_nm;i++) {
                FPRNT=sprintf("%s%.8g ",FPRNT,A[_m[i]])
                PPRNT=sprintf(PFMT,PPRNT,A[_m[i]])
                VPRNT=sprintf(VFMT,VPRNT,A[_m[i]])
            }
            FPRNT=sprintf("%s%s ",FPRNT,_hkl_val)
            scan_loop
            scan_data(NPTS,A[_m[0]])
            scan_plot
         }
         scan_tail
        }
        \'
        _scan_on
'

#########################################################################
#
# `mesh' is a two-motor nested scan
#  This version moves the outer loop (slow motor) normally, and uses
#  trajectory scanning for the inner loop (fast motor).  The trajectory is
#  built once and executed repeatedly.
#
def mesh '
    if ($# != 9) {
        eprint "\
Usage:  mesh  mot1 s1 f1 intervals1  mot2 s2 f2 intervals2  time"
        exit
    }
    _check0 "$1"; _check0 "$5"
    {
        _m[0] = $1; _s1 = $2; _f1 = $3; _n1 = int($4)
        _m[1] = $5; _s2 = $6; _f2 = $7; _n2 = int($8)
        _ctime = $9
    }
    if (_n1 <= 0 || _n2 <= 0) {
        eprint "Intervals <= 0"
        exit
    }

    _bad_lim = 0
    _chk_lim _m[0] _s1
    _chk_lim _m[0] _f1
    _chk_lim _m[1] _s2
    _chk_lim _m[1] _f2
    if (_bad_lim) exit
    if (traj_index(0) < 0) exit

    HEADING = sprintf("mesh  $1 %g %g %g  $5 %g %g %g  %g",\
                        $2, $3, $4, $6, $7, $8, $9)

    _d1 = (_f1 - _s1) / _n1; _d2 = (_f2 - _s2) / _n2++
    _nm=2
    _cols=2+_hkl_col
    X_L = "$1"; _sx = _s1; _fx = _f1
    Y_L = cnt_name(DET)
    _stype = 1|8|(2<<8)
    FPRNT=sprintf("%s  %s  ",motor_name(_m[0]),motor_name(_m[1]))
    PPRNT=sprintf("%8.8s %8.8s ",motor_name(_m[0]),motor_name(_m[1]))
    VPRNT=sprintf("%9.9s %9.9s ",motor_name(_m[0]),motor_name(_m[1]))
    FPRNT=sprintf("%s%s  ",FPRNT,_hkl_sym1)
    scan_head
    PFMT=sprintf("%%8.%df %%8.%df ",UP,UP)
    VFMT=sprintf("%%9.%df %%9.%df ",UP,UP)
    _g1 = _n1
    _g2 = 0
    def _scan_on \'{
        local i, j, k, dp
        # Initialize trajectory
        traj_init
        # Build trajectory
        dp = (_f1 - _s1) / MIN_TRAJ_ELEMENTS
        k = _traj_motor[0]
        _traj_move[k] = 1
        for (j=0;j<MIN_TRAJ_ELEMENTS;j++) _traj_pos[k][j] = dp
        dt = _n1 * _ctime / MIN_TRAJ_ELEMENTS
        for (j=0;j<MIN_TRAJ_ELEMENTS;j++) _traj_time[j] = dt
        traj_build MIN_TRAJ_ELEMENTS _n1

        for (; _g2 < _n2; _g2++){
            A[_m[1]] = _s2 + _g2 * _d2
            A[_m[0]] = _s1
            # Move motors to start of next trajectory
            scan_move
            # Execute trajectory
            traj_exec
            # Read counts
            traj_read_counts COUNTERS _n1
            # If TRAJ_USE_ACTUAL is true then read actual positions
            if (TRAJ_USE_ACTUAL != 0) traj_read_actual _n1
            # Print, save and plot the results
            for (_g1=0; _g1 < _n1; _g1++, NPTS++) {
                if (TRAJ_USE_ACTUAL) {
                    A[_m[0]] = _traj_actual[_traj_motor[0]][_g1]
                } else {
                    # Note the +1 in when the sync pulse occured
                    A[_m[0]] = _s1 + (_g1+1) * _d1
                }
                for (i=0;i<COUNTERS;i++) S[i]=_traj_counts[i][_g1]
                # Need to find the right way to determine clocks per second
                S[sec] = S[sec]/1.e7
                FPRNT=sprintf("%.8g %.8g ",A[_m[0]],A[_m[1]])
                PPRNT=sprintf(PFMT,A[_m[0]],A[_m[1]])
                VPRNT=sprintf(VFMT,A[_m[0]],A[_m[1]])
                FPRNT=sprintf("%s%s ",FPRNT,_hkl_val)
                scan_loop
                scan_data(_g1,A[_m[0]])
                scan_plot
            }
        }
        scan_tail
    }\'
    _scan_on
'

#########################################################################
#
# `hklscan' is a general linear reciprocal space scan
# (Limit checking is done at the last point first, since limits
# are often exceeded at the extreme points of a scan.)
def hklscan '
        if ($# != 8) {
                eprint "\
Usage:  hklscan Hstart Hfinish Kstart Kfinish Lstart Lfinish intervals time"
                exit
        }
        {
                _s1 = $1; _f1 = $2; _s2 = $3; _f2 = $4; _s3 = $5; _f3 = $6
                _n1 = int($7); _ctime = $8
        }

        if (_n1 <= 0) {
                eprint "Intervals <= 0"
                exit
        }
        HEADING = sprintf("hklscan  %g %g  %g %g  %g %g  %g %g", $1,$2,$3,\
                $4,$5,$6,$7,$8)
        _d1 = (_f1 - _s1)/_n1
        _d2 = (_f2 - _s2)/_n1
        _d3 = (_f3 - _s3)/_n1++

        H=_f1; K=_f2; L=_f3
        calcA; _bad_lim=0; _hkl_lim
        if (_bad_lim) {
                eprintf("(H K L = %g %g %g)\n",H,K,L)
                exit
        }
        if (_pre_chk) {
                local i
                for (i=0;i<_n1;i++) {
                        H = _s1 + i*_d1
                        K = _s2 + i*_d2
                        L = _s3 + i*_d3
                        calcA
                        _bad_lim = 0
                        _hkl_lim
                        if (_bad_lim) {
                                eprintf("(H K L = %g %g %g)\n",H,K,L)
                                exit
                        }
                }
        }
        _cols=3
        if (_d3)
                { X_L = "L"; _sx = _s3; _fx = _f3 }
        else if (_d2)
                { X_L = "K"; _sx = _s2; _fx = _f2 }
        else
                { X_L = "H"; _sx = _s1; _fx = _f1 }
        Y_L = cnt_name(DET)
        _stype = 2
        FPRNT="H  K  L  "
        PPRNT=""
        {
         local i
         for (i=0;i<_numgeo;i++)
                PPRNT=sprintf("%s%8.8s ",PPRNT,motor_name(mA[i]))
        }
        VPRNT=sprintf("%10s %10s %10s ","H","K","L")
        scan_head
        def _scan_on \'
         for (; NPTS < _n1; NPTS++) {
                local i h_ca k_ca l_ca
                H = h_ca = _s1 + NPTS*_d1
                K = k_ca = _s2 + NPTS*_d2
                L = l_ca = _s3 + NPTS*_d3
                get_angles; calcA
                scan_move
                FPRNT=sprintf("%g %g %g ",h_ca,k_ca,l_ca)
                PPRNT=""
                for (i=0;i<_numgeo;i++)
                        PPRNT=sprintf("%s%8.4f ",PPRNT,A[mA[i]])
                VPRNT=sprintf("%10.5g %10.5g %10.5g ",h_ca,k_ca,l_ca)
                scan_loop
                scan_data(NPTS,_d3? l_ca:(_d2? k_ca:h_ca))
                H=h_ca; K=k_ca; L=l_ca
                scan_plot
         }
         scan_tail
        \'
        _scan_on
'
#########################################################################
#
# `hklmesh' is a two-Q nested scan.  It uses the fact that H, K and L
# are defined as Q[0], Q[1] and Q[2], respectively.
#
def hklmesh '
        _m1 = index("HKL", "$1")
        _m2 = index("HKL", "$5")
        if ($# != 9 || !_m1 || !_m2 || _m1 == _m2) {
                eprint "\
Usage:  hklmesh  Q1 s1 f1 intervals1  Q2 s2 f2 intervals2  time\n\
        Q1 and Q2 are H, K or L.  Q1 != Q2"
                exit
        }
        waitall; get_angles; calcHKL
        {
                _m1--; _s1 = $2; _f1 = $3; _n1 = int($4)
                _m2--; _s2 = $6; _f2 = $7; _n2 = int($8)
                _ctime = $9
        }
        if (_n1 <= 0 || _n2 <= 0) {
                eprint "Intervals <= 0"
                exit
        }

        HEADING = sprintf("hklmesh  $1 %g %g %g  $5 %g %g %g  %g",\
                        $2,$3,$4,$6,$7,$8,$9)

        _d1 = (_f1 - _s1) / _n1++; _d2 = (_f2 - _s2) / _n2++
        if (_pre_chk) {
                local i j
                for (i=0; i<_n2; i++) {
                        Q[_m2] = _s2 + i * _d2
                        for (j=0; j<_n1; j++) {
                                Q[_m1] = _s1 + j * _d1
                                calcA
                                _bad_lim = 0
                                _hkl_lim
                                if (_bad_lim) {
                                        eprintf("(H K L = %g %g %g)\n", H,K,L)
                                        exit
                                }
                                calcHKL
                        }
                }
        }
        _cols=3
        X_L = "$1"; _sx = _s1; _fx = _f1
        Y_L = cnt_name(DET)
        _stype=2|8
        FPRNT="H  K  L  "
        PPRNT=""
        {
         local i
         for (i=0;i<_numgeo;i++)
                PPRNT=sprintf("%s%8.8s ",PPRNT,motor_name(mA[i]))
        }
        VPRNT=sprintf("%10s %10s %10s ","H","K","L")
        scan_head
        _hklmesh
'
# Long macro definition requires 2 parts
#  save Q[_m3] at start of mesh and restore at each point to prevent drift
def _hklmesh '
        _m3 = 3 - _m1 - _m2
        _g1 = _n1
        _g2 = 0
        def _scan_on \'
         {
          local _ca
          _ca[_m3] = Q[_m3]
          for (; _g2 < _n2; _g2++){
                Q[_m2] = _ca[_m2] = _s2 + _g2 * _d2
                if (_g1 == _n1)
                        _g1 = 0
                for (; _g1 < _n1; _g1++, NPTS++) {
                        local i
                        Q[_m1] = _ca[_m1] = _s1 + _g1 * _d1
                        Q[_m3] = _ca[_m3]
                        get_angles; calcA
                        scan_move
                        FPRNT=sprintf("%g %g %g ", _ca[0],_ca[1],_ca[2])
                        PPRNT=""
                        for (i=0;i<_numgeo;i++)
                                PPRNT=sprintf("%s%8.4f ",PPRNT,A[mA[i]])
                        VPRNT=sprintf("%10.5g %10.5g %10.5g ",\
                                                        _ca[0],_ca[1],_ca[2])
                        scan_loop
                        scan_data(_g1,_ca[_m1])
                        scan_plot
                }
          }
         }
         scan_tail
        \'
        _scan_on
'


def _hklline '
        {_const = $1; _s1 = $2; _f1 = $3; _n1 = int($4); _ctime = $5}

        if (_n1 <= 0) {
                eprint "Intervals <= 0"
                exit
        }

        _d1 = (_f1 - _s1) / _n1++
        _cols=4
        _sx = _s1; _fx = _f1
        Y_L = cnt_name(DET)
        _stype = 2
        FPRNT=sprintf("%s  H  K  L  ",X_L)
        PPRNT=""
        for (i=0;i<_numgeo;i++)
                PPRNT=sprintf("%s%8.8s ",PPRNT,motor_name(mA[i]))
        VPRNT=sprintf("%10s %10s %10s ","H","K","L")

        {
                local x
                x = _f1
                _hkl x
                if ("$6" != "0")
                        $6
                calcA
                _bad_lim = 0
                _hkl_lim
                if (_bad_lim) {
                        eprintf("(H K L = %g %g %g)\n", H, K, L)
                        exit
                }
        }
        if (_pre_chk) for (i=0; i<_n1; i++) {
                local x
                x = _s1 + i * _d1
                _hkl x
                if ("$6" != "0")
                        $6
                calcA
                _bad_lim = 0
                _hkl_lim
                if (_bad_lim) {
                        eprintf("(H K L = %g %g %g)\n", H, K, L)
                        exit
                }
        }

        scan_head
        def _scan_on \'
         for (; NPTS < _n1; NPTS++) {
                local i x h_ca k_ca l_ca
                _x = _s1 + NPTS * _d1
                _hkl _x
                if ("$6" != "0")
                        $6
                h_ca = H; k_ca = K; l_ca = L
                get_angles; calcA
                scan_move
                FPRNT=sprintf("%g %g %g %g ",_x,h_ca,k_ca,l_ca)
                PPRNT=""
                for (i=0;i<_numgeo;i++)
                        PPRNT=sprintf("%s%8.4f ",PPRNT,A[mA[i]])
                VPRNT=sprintf("%10.5g %10.5g %10.5g ",h_ca,k_ca,l_ca)
                scan_loop
                scan_data(NPTS,_x)
                H = h_ca; K = k_ca; L = l_ca
                scan_plot
         }
         scan_tail
        \'
        _scan_on
'


# Cleanup macro used by all of the scans.
def _scanabort '
        _cleanup2
        _cleanup3
        comment "Trajectory scan aborted"
        sync
'
# "resume" should restart aborted scans.  For now we do not support restarting
# trajectory scans
#  (_stype&8 indicates a 2D-mesh scan).
def resume '
        eprint "Can\'t resume trajectory scans."
'

# The loop macro, called by all the scans at each iteration
def _loop '{
        local z,i,n
        z = _ctime < 0? sec:MON
        T_AV += DEGC;
        if (z >= 0)
                MT_AV += S[z]
        s = sprintf("%3d %s%8.0f ", NPTS,VPRNT,S[DET])

        tty_cntl("resized?")
        n = int((COLS - length(VPRNT) - length(Pout) - 24) / 9)
        if (MON >= 0) {
                s = s sprintf("%8.0f ", S[MON])
                n--
        }
        s = s sprintf("%10.6g ",S[sec])

        for (i=0; i<COUNTERS && n>0; i++) {
                if (i!=DET && i !=MON && i!=sec && is_using_counter(i)) {
                        s = s sprintf("%8.4g ", S[i])
                        n--
                }
        }

        printf("%s%s\n",s,Pout)

        ifp {
                fprintf(PRINTER,"%3d %s %8.6g ", NPTS,_hkl_val11,S[sec])
                if (MON >= 0)
                        fprintf(PRINTER,"%8.0f ", S[MON])
                fprintf(PRINTER,"%8.0f %s%s\n", S[DET],PPRNT,Pout)
        }
        if (DATAFILE != "") {
                fprintf(DATAFILE,"%s%s%d",FPRNT,Fout,(TIME_END=time())-EPOCH)
                for (i=0;i<COUNTERS;i++)
                        if (i != z && i != DET && is_using_counter(i))
                                fprintf(DATAFILE," %g",S[i])
                if (z >= 0)
                        fprintf(DATAFILE," %g",S[z])
                fprintf(DATAFILE," %g\n",S[DET]);
        }
        user_scan_loop
}'

# traj_index returns the index of a trajectory motor given the index of
# a SPEC motor.  It returns -1 if the motor is not valid
def traj_index(mi) '{
    local i ti
    ti = -1
    i = _m[mi]
    if (i > MAX_TRAJ_INDEX) {
        eprintf("invalid motor index in chk_traj=%d\n", i)
    } else {
        i = TRAJ_INDEX[i]
        if (i < 0) {
            eprintf("not valid trajectory motor in chk_traj=%d\n", i)
        } else {
            _traj_motor[mi] = i
            ti = i
        }
    }
    return(ti)
}'

# traj_init initializes a trajectory.
# It sets all of the move flags to 0
def traj_init '{
    local j
    for(j=0;j<MAX_TRAJ_MOTORS;j++) _traj_move[j]=0
}'


# traj_build builds a trajectory.  It is passed
#   nels         - number of trajectory elements
#   npts         - number of output pulses
def traj_build '
    if ($# != 2) {
        eprint "Usage: traj_scan nels npts"
        exit
    }
    {
        local i, _pv
        _pv = TRAJ_NAME "TimeMode";  epics_put(_pv, "Per element")
        _pv = TRAJ_NAME "MoveMode";  epics_put(_pv, "Relative")
        _pv = TRAJ_NAME "Nelements"; epics_put(_pv, $1)
        _pv = TRAJ_NAME "Npulses";   epics_put(_pv, $2)
        for (i=0; i<MAX_TRAJ_MOTOR; i++) {
            _pv = TRAJ_MOTOR_NAME[i] "Move"
            epics_put(_pv, _traj_move[i])
            _pv = TRAJ_MOTOR_NAME[i] "Traj"
            epics_put(_pv, _traj_pos[i][0:$1])
        }
        _pv = TRAJ_NAME "TimeTraj";  epics_put(_pv, _traj_time[0:$1])
        _pv = TRAJ_NAME "Build";     epics_put(_pv, 1)
        while (epics_get(_pv) == "Busy") sleep(0.1)
        _pv = TRAJ_NAME "BuildStatus";
        if (epics_get(_pv) != "Success") {
            local mess
            _pv = TRAJ_NAME "BuildMessage"
            mess = epics_get(_pv)
            eprintf("Trajectory build failed, error message = %s", mess)
            exit
        }
    }
'

# traj_exec executes a trajectory.
def traj_exec '
    {
        local _pv
        _pv = TRAJ_NAME "Execute"; epics_put(_pv, 1)
        while (epics_get(_pv) == "Busy") sleep(0.1)
        _pv = TRAJ_NAME "ExecStatus";
        if (epics_get(_pv) != "Success") {
            local mess
            _pv = TRAJ_NAME "ExecMessage"
            mess = epics_get(_pv)
            eprintf("Trajectory execution failed, error message = %s", mess)
            exit
        }
    }
'
# traj_read_counts reads the counts from the MCS
# It is passed ndets, npts
# It puts the counts in _traj_counts
def traj_read_counts '
    if ($# != 2) {
        eprint "Usage: traj_read_counts ndets npts"
        exit
    }
    {
        local i, _ndets, _npts
        _ndets=$1; _npts=$2
        for (i=0; i<_ndets; i++) {
            _traj_counts[i][0:_npts-1] = epics_get(TRAJ_MCS_NAME[i])
        }
    }
'
# traj_read_actual reads the actual motor positions from the trajectory
# It puts the results in _traj_actual
def traj_read_actual '
    if ($# != 1) {
        eprint "Usage: traj_read_actual npts"
        exit
    }
    {
        local i, _pv, _npts
        _npts=$1
        _pv = TRAJ_NAME "Readback"; epics_put(_pv, 1)
        while (epics_get(_pv) == "Busy") sleep(0.1)
        _pv = TRAJ_NAME "ReadStatus";
        if (epics_get(_pv) != "Success") {
            local mess
            _pv = TRAJ_NAME "ReadMessage"
            mess = epics_get(_pv)
            eprintf("Trajectory read failed, error message = %s", mess)
            exit
        }
        for (i=0; i<MAX_TRAJ_MOTOR; i++) {
            _pv = TRAJ_MOTOR_NAME[i] "Actual"
            _traj_actual[i][0:_npts-1] = epics_get(_pv)
        }
    }
'

# Trajectory scan globals
# These are site-specific
global IOC_PREFIX
global TRAJ_NAME
global TRAJ_MOTOR_NAME
global MAX_TRAJ_MOTORS
global MAX_TRAJ_INDEX
global MAX_TRAJ_MCS
global MAX_TRAJ_POINTS
global MIN_TRAJ_ELEMENTS
global MAX_TRAJ_ELEMENTS
global TRAJ_USE_ACTUAL
global TRAJ_INDEX
IOC_PREFIX          = "13IDC:"
TRAJ_NAME           = IOC_PREFIX "traj1"
TRAJ_MOTOR_NAME[0]  = TRAJ_NAME "M1"
TRAJ_MOTOR_NAME[1]  = TRAJ_NAME "M2"
TRAJ_MOTOR_NAME[2]  = TRAJ_NAME "M3"
TRAJ_MOTOR_NAME[3]  = TRAJ_NAME "M4"
TRAJ_MOTOR_NAME[4]  = TRAJ_NAME "M5"
TRAJ_MOTOR_NAME[5]  = TRAJ_NAME "M6"
TRAJ_MOTOR_NAME[6]  = TRAJ_NAME "M7"
TRAJ_MOTOR_NAME[7]  = TRAJ_NAME "M8"
TRAJ_MCS_NAME[0]    = IOC_PREFIX "str:mca1"
TRAJ_MCS_NAME[1]    = IOC_PREFIX "str:mca2"
TRAJ_MCS_NAME[2]    = IOC_PREFIX "str:mca3"
TRAJ_MCS_NAME[3]    = IOC_PREFIX "str:mca4"
TRAJ_MCS_NAME[4]    = IOC_PREFIX "str:mca5"
TRAJ_MCS_NAME[5]    = IOC_PREFIX "str:mca6"
TRAJ_MCS_NAME[6]    = IOC_PREFIX "str:mca7"
TRAJ_MCS_NAME[7]    = IOC_PREFIX "str:mca8"
MAX_TRAJ_MOTORS     = 8
MAX_TRAJ_INDEX      = 8
MAX_TRAJ_MCS        = 8
MAX_TRAJ_POINTS     = 1000
MIN_TRAJ_ELEMENTS   = 4
MAX_TRAJ_ELEMENTS   = 1000
TRAJ_USE_ACTUAL     = 0
# This table gives the TRAJ motor corresponding to each SPEC motor
TRAJ_INDEX[0]       = 4  # Two theta
TRAJ_INDEX[1]       = -1 # Eulerian theta
TRAJ_INDEX[2]       = -1 # Eulerian chi
TRAJ_INDEX[3]       = -1 # Eulerian phi
TRAJ_INDEX[4]       = 2  # Kappa theta
TRAJ_INDEX[5]       = 1  # Kappa
TRAJ_INDEX[6]       = 0  # Kappa phi
TRAJ_INDEX[7]       = -1 # Unused

array _traj_motor[MAX_TRAJ_INDEX]
array _traj_move[MAX_TRAJ_MOTORS]
array _traj_pos[MAX_TRAJ_MOTORS][MAX_TRAJ_ELEMENTS]
array _traj_time[MAX_TRAJ_ELEMENTS]
array _traj_counts[MAX_TRAJ_MCS][MAX_TRAJ_POINTS]
array _traj_actual[MAX_TRAJ_MOTORS][MAX_TRAJ_POINTS]
