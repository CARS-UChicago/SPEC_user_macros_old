# use this to play around with macros
#def test '{
#   local m[], n, str, j
#   str = " the number of words is "
#   n = split(str,m)
#   p str, n
#
#  for (j=0;j<n;j++) p m[j];
#
#}'

##########################################################################################
global FS_MOVE
       FS_MOVE = 0
global FS_CEN 
global FS_FWHM
global FS_AMP
global FS_X

def fake_dscan '{

	if ($# != 7) {
		eprint "Usage:  fake_dscan  motor start finish  intervals time peak_amp bgr"
		exit
	} 
	_check0 "$1"
      
      if (FS_MOVE == 1) {
         # if we are really moving the motors get the current positions 
         waitall
         get_angles
      } else {
         # otherwise update the A array, ie assume that HKL have been set
         # and now get fake values for A array
        calcA
      }
      _c1 = A[$1]

	_m[0] = $1; 
      _s[0] = _c1 + $2; 
      _f[0] = _c1 + $3
	_n1 = int($4); 
      _ctime = $5
	_nm = 1

     # give vals for fake peak cen and fwhm
      FS_CEN = ( _s[0] + _f[0] ) / 2;
      FS_FWHM = ( _f[0] - _s[0] ) / 10;
      FS_AMP = $6;
      FS_BGR = $7;
     
      _fake_ascan

}'

##############################################################
#  _ascan scans the number of motors given by _nm.
#  The arrays _m[], _s[], _f[] and _d[] contain the motor
#  numbers, start, finish and step sizes for each of the
#  scanned motors.  
#
def _fake_ascan '{

      # check the number of intervals
	if (_n1 <= 0) {
		eprint "Intervals <= 0"
		exit
	} ;

      # check the motor limits for scan
	{
	 local i
	 for (i=0;i<_nm;i++) {
		 _bad_lim = 0
		 _chk_lim _m[i] _s[i]
		 _chk_lim _m[i] _f[i]
		 if (_bad_lim) exit;
	 }
	}
	HEADING=_nm>1? sprintf("a%dscan ", _nm):"ascan "
	{
	 local i
	 for (i=0;i<_nm;i++) {
		HEADING=sprintf("%s%s",HEADING,sprintf(" %s %g %g ",\
			motor_mne(_m[i]),_s[i],_f[i]))
		_d[i] = (_f[i] - _s[i]) / _n1
	 }
	}
	HEADING=sprintf("%s %g %g",HEADING,_n1,_ctime)
	_n1++
	_cols=_nm+_hkl_col
	X_L = motor_name(_m[0])
	Y_L = cnt_name(DET)
	_sx = _s[0]; _fx = _f[0]
	_stype = 1|(_nm<<8)
	FPRNT=PPRNT=VPRNT=""
	{
	 local i
	 for (i=0;i<_nm;i++) {
	     FPRNT=sprintf("%s%s  ",FPRNT,motor_name(_m[i]))
	     PPRNT=sprintf("%s%8.8s ",PPRNT,motor_name(_m[i]))
	     VPRNT=sprintf("%s%9.9s ",VPRNT,motor_name(_m[i]))
	 }
	}
	FPRNT=sprintf("%s%s  ",FPRNT,_hkl_sym1)

      #### 
	fake_scan_head
	PFMT=sprintf("%%s%%8.%df ",UP)
	VFMT=sprintf("%%s%%9.%df ",UP)
 
     # do the scan loop
      for (NPTS = 0; NPTS < _n1; NPTS++) {
		local i
		for (i=0;i<_nm;i++)
			A[_m[i]] = _s[i] + NPTS * _d[i]
		
            ## if we are really moving the motors then move em
            if (FS_MOVE ==1){ 
                 scan_move;
            }

		FPRNT=PPRNT=VPRNT=""
		for (i=0;i<_nm;i++) {
		     FPRNT=sprintf("%s%.8g ",FPRNT,A[_m[i]])
		     PPRNT=sprintf(PFMT,PPRNT,A[_m[i]])
		     VPRNT=sprintf(VFMT,VPRNT,A[_m[i]])
		}
		FPRNT=sprintf("%s%s ",FPRNT,_hkl_val)

            FS_POS = A[_m[0]];
            fake_scan_loop
		scan_data(NPTS,A[_m[0]])
		scan_plot
	 }
	 scan_tail

}'

#########################################################################
# The loop macro, called by all the scans at each iteration

def fake_scan_loop '{
	local z,i,n

	fake_scan_count _ctime

	z = _ctime < 0? sec:MON

	if (z >= 0)
		MT_AV += S[z]
	s = sprintf("%3d %s%8.0f ", NPTS,VPRNT,S[DET])

	tty_cntl("resized?")
	n = int((COLS - length(VPRNT) - length(Pout) - 24) / 9)
	if (MON >= 0) {
		s = s sprintf("%8.0f ", S[MON])
		n--
	}
	s = s sprintf("%10.6g ",S[sec])

      # print all the other scalars .....
	for (i=0; i<COUNTERS && n>0; i++) {
		if (i!=DET && i !=MON && i!=sec && is_using_counter(i)) {
			s = s sprintf("%8.4g ", S[i])
			n--
		}
	}

	printf("%s%s\n",s,Pout)

	if (DATAFILE != "") {
		fprintf(DATAFILE,"%s%s%d",FPRNT,Fout,(TIME_END=time())-EPOCH)
		for (i=0;i<COUNTERS;i++)
			if (i != z && i != DET && is_using_counter(i))
				fprintf(DATAFILE," %g",S[i])
		if (z >= 0)
			fprintf(DATAFILE," %g",S[z])
		fprintf(DATAFILE," %g\n",S[DET]);
	}
        
}'

#########################################################################
# "count" is called by the scans to count monitor or time.
# It runs the clock and reads the scalers.
def fake_scan_count '{
        local j, arg, peak_amp, bgr
        # arg is either count time or number of monitor cnts
        arg = $1

        waitmove
        for (j=0; j< COUNTERS ; j++) {
            S[j] = 0;
        }


        # below is the "peak" function
         peak_amp = FS_AMP / ( FS_FWHM + square(FS_POS - FS_CEN) );

        # calc a background 
         bgr = FS_BGR + ( sqrt(peak_amp+FS_BGR) * ( 2* (0.5 - rand(100)/100 ) ) ) ;

        # below is the "total" function
        peak_amp = peak_amp + bgr;


        # lets assume io is 1e6 cps.
        # if MON = 1 using io as monitor
        if (MON == 1){
           S[sec] = arg/1e6;
           S[io] = arg;
           S[i1] = arg* ( peak_amp/(FS_AMP+FS_BGR) );
           S[DET] = peak_amp;
        } else { 
           S[sec]  = arg;
           S[io] = (arg * 1e6) ;
           S[i1] = (arg * 1e6)* ( peak_amp/(FS_AMP+FS_BGR) ) ;
           S[DET] = peak_amp;
        }

        if (S[sec] && MON >= 0)
                MON_RATE=S[MON]/S[sec]


}'

#########################################################################

#########################################################################
#
# The head macro, called by all the scans.
def fake_scan_head '
	user_prescan_head
	_scan_time
	# waitall; get_angles; calcHKL
	NPTS = T_AV = MT_AV = 0
	DATE = date()
	TIME = TIME_END = time()
	_cp = A[_pmot]
	cdef("cleanup_once", "_scanabort;", "scan_cleanup")

	# DATA FILE HEADER
	if (DATAFILE != "") {
		local i,j,z,s
		ond; offt
		printf("\n#S %d  %s\n#D %s\n",++SCAN_N,HEADING,DATE)
		if (_ctime < 0) {
			printf("#M %g  (%s)\n", -_ctime, cnt_name(MON))
		} else {
			printf("#T %g  (%s)\n", _ctime, cnt_name(sec))
            }
 
           # T2 print out the geometry data in the scan header
           # added the UB and Q arrays to the output    
		_head_par G 0
		_head_par U 1
		# _head_par M 2
            _head_par UB 3
            _head_par Q 4

		printf("#Q %s\n", _hkl_val)

		for (i=0; i<MOTORS; i+= 8) {
			s = sprintf("#P%d ",i/8)
			for (j=i; j<i+8 && j<MOTORS;) {
				if (motor_name(mA[j]) != "unused")
					s = s sprintf("%.8g", A[mA[j]])
				if (j%8 == 7)
					break
				s = s " "
				j++
			}
			print s
		}
		Fheader
		user_Fheader
		z = _ctime < 0? sec:MON
		for (i=j=0;i<COUNTERS;i++)
			if (i != z && i != DET && is_using_counter(i))
				j++
		printf("#N %d\n", _cols + (MON<0? 2:3) + j)
		_cols = 0
		printf("#L %s%sEpoch",FPRNT,Flabel)
		for (i=0;i<COUNTERS;i++)
			if (i != z && i != DET && is_using_counter(i))
				printf("  %s",cnt_name(i))
		if (z >= 0)
			printf("  %s",cnt_name(z))
		printf("  %s\n",cnt_name(DET))
		offd; ont
	} else {
		SCAN_N++
      }
	T_L = sprintf("Scan %d", SCAN_N)

	# PRINTER HEADER
	ifp {
		local i, j, k, s
		onp; offt
		printf("\n")
		formfeed
		printf("\nScan %3d   %s   file = %s  %s  user = %s\n",\
			SCAN_N,DATE,DATAFILE,TITLE,USER)
		printf("%s\n\n",HEADING)
		for (i=0; i<MOTORS; i+=8) {
			s = "  "
			for (j=i; j<i+8 && j<MOTORS;) {
				if (is_using_motor(mA[j]))
					s = s sprintf("%9.9s", motor_name(mA[j]))
				if (j%8 == 7)
					break
				s = s " "
				j++
			}
			print s
			s = "  "
			for (j=i; j<i+8 && j<MOTORS;) {
				if (is_using_motor(mA[j]))
					s = s sprintf("%9.6g ", A[mA[j]])
				if (j%8 == 7)
					break
				s = s " "
				j++
			}
			print s
		}
		Pheader
		user_Pheader
		printf("\n  # %s %8.8s ", _hkl_sym11,cnt_name(sec))
		if (MON >= 0)
			printf("%8.8s ", cnt_name(MON))
		printf("%8.8s %s%s\n", cnt_name(DET),PPRNT,Plabel)
		offp; ont
	}
	# TTY HEADER
	{
		local i, n, s

		if (DATAFILE == "/dev/null" || DATAFILE == "null")
			s = "**NO DATA FILE**"
		else
			s = sprintf("file = %s", DATAFILE)
		printf("\nScan %3d   %s   %s  %s  user = %s\n%s\n\n",\
			SCAN_N,DATE,s,TITLE,USER,HEADING)
		s = sprintf("  # %s%8.8s ", VPRNT,cnt_name(DET))

		tty_cntl("resized?")
		n = int((COLS - length(VPRNT) - length(Plabel) - 24) / 9)
		if (MON >= 0) {
			s = s sprintf("%8.8s ",cnt_name(MON))
			n--
		}
		s = s sprintf("%10.10s ",cnt_name(sec))

		for (i=0; i<COUNTERS && n>0; i++) {
			if (i!=DET && i !=MON && i!=sec && is_using_counter(i)) {
				s = s sprintf("%8.8s ", cnt_name(i))
				n--
			}
		}
		printf("%s%s\n",s,Plabel)
	}
	user_postscan_head
'

#########################################################################

