#############
# SKG    2005
# powder_scan  ---> 2d powder scan for film on glass
# glass_or  ---> orientation matrix for non-xtline
#
#
#  We need some flags to trap the transition conditions!
#  This macro uses get_user_limit
#  note get_user_limit defined in keta_mesh, should be moved to site_standard.mac.... 
#
#############


global CHECK_PWD_SCAN 
       CHECK_PWD_SCAN = 1


def check_powder_scan '{
   if ($# != 6 ) {
       #                    	  	  1       2        3      4         5       6  
       msg_str = "Usage: powder_scan  tth_st  tth_end  num_pts  sc_time  alp_val  beta_val " 
       print msg_str
       exit
    } 
    CHECK_PWD_SCAN = 1
    powder_scan  $1 $2 $3 $4 $5 $6 
}'

def do_powder_scan '{
   if ($# != 6 ) {
       #                    	  	  1       2        3      4         5       6  
       msg_str = "Usage: powder_scan  tth_st  tth_end  num_pts  sc_time  alp_val  beta_val " 
       print msg_str
       exit
    } 
    CHECK_PWD_SCAN = 0
    powder_scan  $1 $2 $3 $4 $5 $6 
}'


####################################################################################
# del & nu scan at fixed alpha and beta ( Powder scan) 
# assumes the sample is flat in the horz scattering geom
# not using flat PHI and CHI, since may not be defined
#
def powder_scan '{
    # check input
    if ($# != 6 ) {
       #                    	  	  1       2        3      4         5       6  
       msg_str = "Usage: powder_scan  tth_st  tth_end  num_pts  sc_time  alp_val  beta_val " 
       print msg_str
       exit
    } 
 
    local tth_st, tth_en, num_pts, sc_cnt_time, alp_val, beta_val;
    tth_st = $1;
    tth_en = $2;
    num_pts = $3;
    sc_time = $4;
    alp_val = $5;
    beta_val = $6;
    
    local array pwd_del_val[num_pts+1]; 
    local array pwd_nu_val[num_pts+1];
    local array pwd_tth_val[num_pts+1];
    local array pwd_d_space[num_pts+1];

    # contstants
    degree = 180/PI;
    radian = PI/180;
    lambda_val = LAMBDA;
    k_mod = 2*PI/lambda_val;

    # bad stuff
    #bad_pts = 0;
    bad_idx = 0;

    # calc delta
    if (num_pts < 1) {
        print " Error: Num points < 1 "
        exit
    }
    d_tth= ($2 - $1)/(num_pts)  
        
    # check the limits of mu and keta
    _bad_lim=0;
    _chk_lim mu  alp_val
    _chk_lim keta A[keta]	
    if (_bad_lim) {
        eprintf("(mu, keta = %g %g )\n", alp_val, A[keta])
        exit 
    }

    # check value
    check = PI - acos(sin(alp_val*radian)*sin(beta_val*radian));
    check = check*degree;

    # calculate and save motor positions arrays
    for(j=0;j<=num_pts;j++) {

       # Get tth value
    	 pwd_tth_val[j] = (tth_st + j*d_tth)
       #print " Calculating for step no. & tth_val " j+1, pwd_tth_val[j];
       if (pwd_tth_val[j] < alp_val + beta_val) {
          print "tth must be greater than alp + beta"
          exit
       }
       
       # Check Q
       Q_val[j] = 2*k_mod*sin(pwd_tth_val[j]*radian/2);
       if ( Q_val[j] >= 2 * k_mod ){ 
          print " Q_val > Q_max = " Q_val[j];
          exit
       }
               
       # calculate pwd_del_val[j]
       del_aa = pow(cos(beta_val*radian), 2);
       del_bb = cos(pwd_tth_val[j]*radian)
       del_cc = sin(alp_val*radian)*sin(beta_val*radian);
       del_dd = cos(alp_val*radian);

       pwd_del_val[j] = asin( sqrt( del_aa - pow( (del_bb + del_cc)/del_dd, 2)));
       pwd_del_val[j] = pwd_del_val[j]*degree;
       
	 #pwd_del_val goes beyond check angle for increase in Q_val 
       if ( pwd_tth_val[j] > check ) {
          print " switch to del --> 180 - del"
          pwd_del_val[j] = 180 - pwd_del_val[j];
       } 
 
       # check the limits of del
	 _bad_lim=0;
       _chk_lim del pwd_del_val[j]
       if (_bad_lim) {
          eprintf("(del = %g )\n",pwd_del_val[j])
          exit
       }
         
	 # calculate pwd_nu_val[j] for unrotated co-ordinate then roatate by alp_val
       nu_val_rot = asin( sin(beta_val*radian)/cos(pwd_del_val[j]*radian))*degree;
       pwd_nu_val[j] = nu_val_rot + alp_val;

       # check upper limit of nu
       get_user_limit nu 1
       nu_upper_lim = user_limit
       if ( pwd_nu_val[j] > nu_upper_lim) {
          print " switching to g_sect = 9 "                   
          pwd_nu_val[j] = pwd_nu_val[j] - 180
          pwd_del_val[j] = 180 - pwd_del_val[j]
       }    

 
	 # check lower limit of nu 
	 get_user_limit nu -1
       nu_lower_lim = user_limit 
       if ( pwd_nu_val[j] < nu_lower_lim) {
         #eprintf("(nu = %g )\n",pwd_nu_val[j]); exit
         print "Bad nu"
         bad_pts[bad_idx] = j;
         bad_idx = bad_idx + 1;
         CHECK_PWD_SCAN = TRUE
       }

       # calculate the scanned Q_mval from A[del] and A[nu] for every NPTS
       Q_mval = 2*k_mod*sqrt((1-cos(pwd_del_val[j]*radian)*cos(pwd_nu_val[j]*radian))/2)
       pwd_d_space[j] = 2*PI/Q_mval
   
       temp_str = sprintf("nu = %g, del = %g\n", pwd_nu_val[j], pwd_del_val[j])
       print temp_str

    } 
    getangles;



    if (CHECK_PWD_SCAN == 1){
       if (bad_idx == 0) {
          print " No forbidden points in the scan"
       } else {
          for (j=0;j<bad_idx;j++) {
             print " Bad tth value = " , pwd_tth_val[bad_pts[j]]
          }
       }
    } else {
       if (IS_TRAJ_SCAN == 0){
         print "MUST BE A TRAJ SCAN"
       } 
       # Move to start position of scan
       #A[chi] = FLAT_CHI
       #A[phi] = FLAT_PHI
       #A[keta] = A[keta] 
       A[mu]  = alp_val
       A[del] = pwd_del_val[0]
       A[nu]  = pwd_nu_val[0]
       scan_move

       # do the scan
       _pwd_header $1 $2 $3 $4 $5 $6 
       #_traj_nu_del_scan num_pts pwd_del_val pwd_nu_val pwd_tth_val pwd_d_space sc_time  
       _traj_nu_del_scan(num_pts,pwd_del_val,pwd_nu_val,pwd_tth_val,pwd_d_space,sc_time)  
       
    }


}'

############################################################################################
def _pwd_header '{
    #tth_st = $1;
    #tth_en = $2;
    #num_pts = $3;
    #sc_time = $4;
    #alp_val = $5;
    #beta_val = $6;

    ### print the scan name
    HEADING= "powder_scan "
    HEADING=sprintf("%s%s",HEADING,sprintf(" %g %g %g %g %g %g ", $1,$2,$3,$4,$5,$6) );

    ### setup for ...
    #_cols=_nm+_hkl_col
    #X_L = motor_name(_m[0])
    #Y_L = cnt_name(DET)
    #_sx = _s[0]; _fx = _f[0]
    #_stype = 1|(_nm<<8)
    _cols= 4 + _hkl_col
    X_L = "del"
    Y_L = cnt_name(DET)
    _sx = $1  #tth_st; 
    _fx = $2  #tth_en;
    _stype = 1|(_nm<<8)

    FPRNT=PPRNT=VPRNT=""
    FPRNT=sprintf("%s%s  ",  FPRNT,"tth  dspace  del  nu")
    PPRNT=sprintf("%s%8.8s ",PPRNT,"tth  dspace  del  nu")
    VPRNT=sprintf("%s%9.9s ",VPRNT,"tth  dspace  del  nu")
    scan_head

}'

############################################################################################


def _traj_nu_del_scan(num_pts,pwd_del_val,pwd_nu_val,pwd_tth_val,pwd_d_space,sc_time)  '{

    #num_pts   = $1;
    #pwd_del_val   = $2;
    #pwd_nu_val    = $3;
    #pwd_tth_val   = $4;
    #pwd_d_space   = $6;
    #sc_time   = $5;

    # Initialize trajectory
    traj_init

    # do the trajectory scan involving two motors
    # unlike hklscan (trajectory) with six motors

    # Define motors which will be moved
    # check for the right TRAJ_INDEX for del and nu
    # in SPEC (PSIC> ) following notes in "user_macro_notes.txt"
     k_1 = TRAJ_INDEX[del]
     k_2 = TRAJ_INDEX[nu]
    _traj_move[k_1]=1
    _traj_move[k_2]=1

    # Build trajectory with relative position to previous
    for (NPTS=0; NPTS < num_pts; NPTS++) {
        _traj_pos[k_1][NPTS] =  pwd_del_val[NPTS+1] - pwd_del_val[NPTS]
        _traj_pos[k_2][NPTS] =  pwd_nu_val[NPTS+1] - pwd_nu_val[NPTS]
        _traj_time[NPTS] = sc_time
    }
    traj_build num_pts num_pts
    
    # Execute trajectory
    traj_exec
    
    # Read counts
    traj_read_counts COUNTERS num_pts
    
    # If TRAJ_USE_ACTUAL is true then read actual positions
    # it takes less time to have TRAJ_USE_ACTUAL = 0 (FALSE) 
    # which doesnt reads the MM4000 positions ( IF & only if
    # values are checked allways reproducible )
    if (TRAJ_USE_ACTUAL) traj_read_actual _n1
 

    ########################
    # Print, save and plot results
    # below resolves to PFMT = "%s%8.4f" 
    PFMT=sprintf("%%s%%8.%df ",UP)
    VFMT=sprintf("%%s%%9.%df ",UP)
    for (NPTS=0; NPTS < num_pts; NPTS++) {
        if (TRAJ_USE_ACTUAL) {
	     # Take the actual positions of each motor and compute HKL
           A[del] = _traj_actual[k_1][NPTS]
           A[nu]  = _traj_actual[k_2][NPTS]
        }  else {
           A[del] = pwd_del_val[NPTS]
           A[nu]  = pwd_nu_val[NPTS]
        }
          
        # get the COUNTER values at every NPTS
        for (i=0;i<COUNTERS;i++) S[i]=_traj_counts[i][NPTS]
        S[sec] = S[sec]/TRAJ_CLOCK_SCALE

        FPRNT=PPRNT=VPRNT=""        
        FPRNT=sprintf("%s%.8g %.8g %.8g %.8g ",FPRNT,pwd_tth_val[NPTS],pwd_d_space[NPTS],A[del],A[nu])
        PPRNT=sprintf("%s%4.8f %4.8f %4.8f %4.8f ",PPRNT,pwd_tth_val[NPTS],pwd_d_space[NPTS],A[del],A[nu])
        VPRNT=sprintf("%s%4.8f %4.8f %4.8f %4.8f ",VPRNT,pwd_tth_val[NPTS],pwd_d_space[NPTS],A[del],A[nu])
        #PPRNT=sprintf(PFMT,PPRNT,A[del],A[nu])
        #VPRNT=sprintf(VFMT,VPRNT,A[del],A[nu])
        scan_loop
        scan_data(NPTS,A[del])
        scan_plot
    }
    scan_tail

}'

##########################################################################
####################################################################
# define surface OR using flat phi and flat chi for c
# and keta azimuth to define longer section along beam direction (Y?)
# note add definitionof the azimuth vector as [001]
def glass_or '{

  getangles      
  # check inputcab 1
  if ($# == 1 ) {
    # use input keta
    keta_azimuth = $1
  } else {
    # use current value
    print "Using current keta value as sample azimuth"
    keta_azimuth = A[6]
  } 

  # set lattice params
  setlat 1 1 1 90 90 90

  # reflections
  # or0
  g_h0=1		#  U[12], h
  g_k0=0		#  U[13], k 
  g_l0=0		#  U[14], l
  # or1
  g_h1=1		#  U[15], h
  g_k1=1		#  U[16], k
  g_l1=0		#  U[17], l

  # angle settings
  # or0
  g_u00=60		          #  U[18], del
  g_u01=keta_azimuth - 30   #  U[19], eta
  g_u02=FLAT_CHI 		    #  U[20], chi
  g_u03=FLAT_PHI		    #  U[21], phi
  g_u04=0		          #  U[22], nu
  g_u05=0		          #  U[23], mu
  # or1
  g_u10=90		          #  U[24], del
  g_u11=keta_azimuth + 45   #  U[25], eta
  g_u12=FLAT_CHI		    #  U[26], chi
  g_u13=FLAT_PHI	          #  U[27], phi
  g_u14=0		          #  U[28], nu
  g_u15=0		          #  U[29], mu
  
  # lambdas for ors
  g_lambda0=1.0	#  U[30], lambda or0 
  g_lambda1=1.0	#  U[31], lambda or1
 
  calcG		# calc(4) in geo code calc UB
  getE            # make sure have current LAMBDA
  calcHKL		# calc where we are from current motor settings (in A matrix)


}'
##############################################################################


