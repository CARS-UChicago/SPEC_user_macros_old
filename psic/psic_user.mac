 # User macro file specific to psic


####################################################################
# A macro called by "wh", "ca" and "ci" to display important
# geometry quantities.
# added plus two to _numgeo so can see all the real motors
# (vs _var in standard.mac)
def _var '
	printf("\nH K L =  %.5g  %.5g  %.5g", H,K,L)
	printf("\t Lambda = %.5g Two Theta = %.5g\n\n",\
		LAMBDA,TTH)
	printf("%9s %9s %9s %9s %9s %9s %9s\n",\
		"Alpha","Beta","Psi","Tau","Qaz","Naz","Omega");
	printf("%9.4f %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f\n\n",\
		ALPHA,BETA,PSI,TAU,QAZ,NAZ,OMEGA)

	_mot _numgeo+3
'
####################################################################


#####################################################################
## use set_eta = val at the current angle settings to 
## change the omega offset val in epics
def set_eta '{

   if ($# != 1){
   eprint "Usage: set_eta val"
   exit
   }
 
   local off_1 eta_1 new_off
   eta_1 = A[1]
   off_1 =  epics_get("13IDC:m27.OFF")
   new_off = $1 + off_1 - eta_1
   epics_put("13IDC:m27.OFF", new_off)
}'
#####################################################################

#####################################################################
## use set_mu = val at the current angle settings to 
## change the Psi offset val in epics
## 
def set_mu '{

   if ($# != 1){
   eprint "Usage: set_mu val"
   exit
   }
 
   local off_1 mu_1 new_off
   mu_1 = A[5]
   off_1 =  epics_get("13IDC:m28.OFF")
   new_off = $1 + off_1 - mu_1
   epics_put("13IDC:m28.OFF", new_off)
}'
#####################################################################


############################################################################
# setaz2, this is a replacement for: setaz, SPECD/psic.mac
# take the chi and phi settings which put the normal along the z-axis
# and compute the polar coordinates of n in the phi frame
# or enter the indicies of n in HKL
############################################################################ 
# Mod SG and TT to save Flat_PHI and CHI
global FLAT_PHI
if ( unset (FLAT_PHI) ) FLAT_PHI = 0.0
global FLAT_CHI
if ( unset (FLAT_CHI) ) FLAT_CHI = 0.0
def setaz2 '{
        print "\n Select azimuth calc mode:"
        _1 = getval(" 0 for using hkl, 1 to use flat_phi and flat_chi", g_sigtau)
        gpset _1 g_sigtau

        if (g_sigtau) {
                _1 = getval(" 0 to use current phi and chi, 1 to input", 1)

                if ( _1 == 0) {
                       #_2 = A[phi]
                       #_3 = A[chi]
                       FLAT_PHI = A[phi]
                       FLAT_CHI = A[chi]
                } else {
                        print "\nEnter flat phi and flat chi:"
                        #_2 = getval(" Flat phi", -1*TAU_AZ)
                        #_3 = getval(" Flat chi", -1*SIGMA_AZ)
                        FLAT_PHI =  getval(" Flat phi", FLAT_PHI)
                        FLAT_CHI =  getval(" Flat chi", FLAT_CHI)                        
                }
                #gpset (-1)*(_2) TAU_AZ
                #gpset (-1)*(_3) SIGMA_AZ
                gpset (-1)*(FLAT_PHI) TAU_AZ
                gpset (-1)*(FLAT_CHI) SIGMA_AZ
     

               if ( SIGMA_AZ < 0) {
                        SIGMA_AZ = (-1)*SIGMA_AZ
                        if ( TAU_AZ < 0 ) {
                           TAU_AZ = 180 + TAU_AZ  
                        } else if (TAU_AZ > 0 ) {
                           TAU_AZ = TAU_AZ - 180
                        }
               }  

        } else {
                _1 = getval(" 0 to use current HKL, 1 to input", 1)

                if (_1 == 0) {
                       _2 = H
                       _3 = K
                       _4 = L
                } else {
                        print "\nEnter azimuthal reference H K L:"
                        _2 = getval(" Azimuthal H", g_haz)
                        _3 = getval(" Azimuthal K", g_kaz)
                        _4 = getval(" Azimuthal L", g_laz)
                }
                gpset _2 g_haz
                gpset _3 g_kaz
                gpset _4 g_laz
        }
        get_angles; calcHKL; 
        print "\n SIGMA_AZ = ", SIGMA_AZ , " TAU_AZ = ", TAU_AZ
        print "\n AZ vector: AZ_H = ", g_haz, ", AZ_K = ", g_kaz, ", AZ_L = ", g_laz
}'
##############################################################################################


###################################################
############# some scan stuff #####################
###################################################


####################################################################
## redefine th2th for psic 
def th2th '{
	if ($# != 4) {
	#    eprint "Usage:  th2th tth_start_rel tth_finish_rel intervals time"
      eprint "Usage:  th2th del_start_rel del_finish_rel intervals time"	
      exit
	} 
      #d2scan tth $1 $2 th ($1)/2 ($2)/2 $3 $4
	d2scan del $1 $2 eta ($1)/2 ($2)/2 $3 $4
}'
####################################################################

####################################################################
## reflectivity scan 
def rlf '{
	if ($# != 4) {
      eprint "Usage:  rlf eta_start eta_finish intervals time"	
      exit
	} 
      ##Usage:  a2scan  motor1 s1 f1  motor2 s2 f2  intervals time"
	a2scan eta ($1) ($2) del ($1)*2 ($2)*2  $3 $4
}'
####################################################################

####################################################################
## reflectivity scan 
def rlf_horz '{
	if ($# != 4) {
      eprint "Usage:  rlf_horz mu_start mu_finish intervals time"	
      exit
	} 
      ##Usage:  a2scan  motor1 s1 f1  motor2 s2 f2  intervals time"
	a2scan mu ($1) ($2) nu ($1)*2 ($2)*2  $3 $4
}'
####################################################################

############################################################################################
# Peak - Iterate on center.
#def Peak '{
#      local num_mots start_width num_loops
#	if ($# != 3 ) {
#	 eprint "Usage: Peak num_mot start_width num_loops \n "
#       exit
#	} 
#         
#	 num_mots =  $1 ;
#       start_width = $2 ;
#       num_loops = $3 ; 
#
#	if (num_mots < 1) {
#		eprint "Number of motors < 1"
#		exit
#	} 
#	
#      local j k width width_0
#
#
#      for (j=0;j<num_loops;j++){
#        
#        if(j<1){
#           width = start_width
#           width_0 = width
#        } else {
#           width = width_0/2
#        }
#
#        if (width < 0.01) {
#	   eprint "Width too small, im bailin out\n "
#         exit
#	  } 
#
#        if (num_mots >=1) center keta width_0;
#        if (num_mots >=2) center kap width_0;
#        if (num_mots >=3) center kphi width_0;
#        if (num_mots >=4) center mu width_0;
#
#        
#        if (num_mots >=1) center keta width;
#        if (num_mots >=2) center kap width;
#        if (num_mots >=3) center kphi width;
#        if (num_mots >=4) center mu width;
#
#        width_0 = width              
#
#      }
#}'
#
################################################################################################

