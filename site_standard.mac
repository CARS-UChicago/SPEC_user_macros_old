############################################################################
############################################################################
## site_standard.mac
## Use this to replace standard macros from
##      /usr/lib/spec.d/standard.mac 
##  or add new (simple) macros which will be used for any spec version
## 
## Note this file is read on a fresh start of spec 
##     ( either ">psic -f" or ">kappa -f" )
## Before defining a new macro type lsdef in spec to see
## if the name is already defined
##
## Note check for hacks 3-20-03, make med work!! T2
##  modified user_get_counts, Fheader...
## Changed MED_PV = "13GE2:med" to MED_PV = "13GE3:med"
## and MED_NUM_DET = 16 MED_NUM_DET = 8
############################################################################
##
## New macro for XRF data collection   March 2007, SKG
## Now epics MCA macro is inserted for XRF data collection, 
## data collection system is handled with PYTHON script, which 
## runs in another machine(now SONATA), New epics_mca_count will
## handle the mca triggering, data base and ROIs
## new macro commands xrf_on, xrf_off,epics_xrf_counts,setup_xrf
## common macros user_getcounts, ct,_loop,
## on xrf_on condition ct triggers the detector but does not wrtite xrf files
## 
############################################################################
#                 convinient shortcut macros                               #
############################################################################
############################################################################
       
############################################################################
# traj_scans
# Scan macros for trajectory scanning with EPICS and the MM4005
# This defines macros to turn trajectory scanning on and off

def traj_scans_on '{
    local t
    t = USERMAC "/traj_scans1.mac"
    qdofile(t)
    setplot 1154
    IS_TRAJ_SCAN = 1;
}'

def traj_scans_off '{
    local t
    t = USERMAC "/point_scans1.mac"
    qdofile(t)
    setplot 1155
    IS_TRAJ_SCAN = 0;
}'

def profile_moves_on '{
    local t
    t = USERMAC "/profileMoves.mac"
    qdofile(t)
    setplot 1154
    IS_TRAJ_SCAN = 1;
}'

def profile_moves_off '{
    local t
    t = USERMAC "/point_scans1.mac"
    qdofile(t)
    setplot 1155
    IS_TRAJ_SCAN = 0;
}'

############################################################################
def ton ' traj_scans_on '
############################################################################

############################################################################
def toff ' traj_scans_off '
############################################################################

############################################################################
def pon ' profile_moves_on '
############################################################################

############################################################################
def poff ' profile_moves_off '
############################################################################

############################################################################
def GSE ' GSE_MACROS '
############################################################################

############################################################################
def sh ' unix() '
############################################################################

############################################################################
def sor ' or_swap '
############################################################################

############################################################################
# macro to run a file defined in the USERMAC directory
def do_user_mac '{ 
  local t
  t = USERMAC "/" $1
  qdofile(t)      
}'
############################################################################



############################################################################
############################################################################
#                 Replacements for standard macros                         #
############################################################################
############################################################################

############################################################################
## gse_cleanup
## Note the "cleanup_always" macro is always called when cntrl-c or error ...
## The cleanup_always and cleanup_once macros are replecements for the 
## _scanabort macro (which is always executed when cntl-c during a scan)... 
## 
## First delete previous defined "gse" part
cdef("cleanup_always","","gse","delete");

def gse_cleanup '{    
    print "gse_cleanup"
    if(IS_FAKE_SCAN){
        fake_dscan_cleanup
    }
    if(IS_ROD_SCAN){
        rod_scan_cleanup;
        close(RS_SUM_FILE);
    } 

    if (EPICS_COUNT == 4){
        print "  Abort Pilatus"
        epics_put(PILATUS_ABORT_PV,0)
    }
       

    #if(IS_EPICS_MED_COUNT){
    #   # IS_EPICS_MED_COUNT = FALSE;
    #}
  
}'

cdef("cleanup_always"," ; gse_cleanup; ","gse");

## Note the other way to get a "cleanup macro" called when get cntrl-c or error
## is to use the following:
## def my_macro '{
##     cdef("cleanup_once","my_cleanup","my_cleanup_key");
##         .....
##         .....
##     cdef("cleanup_once","","my_cleanup_key","delete");
## }'
##
###########################################################################

############################################################################
## this is executed after any motor move
## see def of move_em
## wait for feedback to lock after any move ... 
def user_postmove '{ 
	if (SPEC == "psic_idc"){
          while (epics_get(ENERGY_MOVING) == "Busy") sleep(0.1)
      }
}'
############################################################################

############################################################################
## user_precount
## executed before a count in standard.mac, see def of scan_count --> count
## use to make sure the mono feedback is locked
## bf counting (note: this is not called during traj_scans...)
def user_precount '{
      ## Checking for locked feedback is not yet setup for BMC
	if (SPEC == "psic_idc"){
   		check_beam
	}
}'
############################################################################
# check beam
############################################################################
## check_beam
## use to make sure the mono feedback is locked
## bf counting (note: this is not called during traj_scans...)
def check_beam '{
   if (SPEC == "psic_idc"){
      if ( epics_get(MONO_FB1_ON) ==  "On" ){
         if (epics_get(MONO_FB1_LOCKED,"short") == 0) printf("Waiting for beam\n")
         while (epics_get(MONO_FB1_LOCKED,"short") == 0){
             if (epics_get(MONO_FB1_ON) == "Off") break 
             sleep(0.01)
         }
      }
   }
}'
############################################################################


############################################################################
## Routines for setting up counting macros and globals
## We assume that spec has been configured with 3 rois in the scaler array
## (required for mca, med and xrf count routines), and one roi name iroi
## for the image detector.  See the spec config file 
##
############################################################################
##
## Global flags deciding how to do the count
# EPICS_COUNT = 0  use only spec default count routine, no epics rois etc
# EPICS_COUNT = 1  use spec default count routine, but read some mca roi pvs
# EPICS_COUNT = 2  use the epics_med count routine (deprecated)
# EPICS_COUNT = 3  use the epics_xrf count routine (replaced epics_med, no need for catcher program)
# EPCIS_COUNT = 4  use the epics_img count routing for pilatus image detector
# EPCIS_COUNT = 5  use the epics_xrf_med count (multielement det)

global EPICS_COUNT
if( unset("EPICS_COUNT") ) EPICS_COUNT = 0

global EPICS_COUNT_SETUP
if( unset("EPICS_COUNT_SETUP") ){
    EPICS_COUNT_SETUP[0] = 1
    EPICS_COUNT_SETUP[1] = 0
    EPICS_COUNT_SETUP[2] = 0  
    EPICS_COUNT_SETUP[3] = 0
    EPICS_COUNT_SETUP[4] = 0
    EPICS_COUNT_SETUP[5] = 0
}

###################################
## Setup for mca counting
## use spec default count routine, but read some mca roi pvs
## ie spec triggers the epics mca detector

do_user_mac("cnt_macs/mca_cnt.mac")

def setup_mca '{
    _setup_mca
    EPICS_COUNT_SETUP[1] = 1
    mca_on
}'

def mca_on '{
    if (EPICS_COUNT_SETUP[1] == 0){
        print "You must run setup_mca"
    }else{ 
        EPICS_COUNT = 1;
        print "MCA_ON" 
    }
}'

def mca_off '{
    EPICS_COUNT = 0;
    print "MED_OFF" 
}'

###################################
## Setup for med couting
## use the epics_med count routine (deprecated)
## requires cather program if you want to write med files

do_user_mac("cnt_macs/med_cnt.mac")

def setup_med '{
    _setup_med
    EPICS_COUNT_SETUP[2] = 1
    med_on
}'

def med_on '{
    if (EPICS_COUNT_SETUP[2] == 0){
        print "You must run setup_med"
    }else{ 
       if ($# ==0){
            _med_on
        } else {
            _med_on $1
        }
        EPICS_COUNT = 2;
        print "MED_ON" 
    }
}'

def med_off '{
    EPICS_COUNT = 0;
    print "MED_OFF" 
}'

###################################
## Setup for xrf couting
## use the epics_xrf count routine 
## replaced epics_med, no need for catcher program

do_user_mac("cnt_macs/xrf_cnt.mac")

def setup_xrf '{
    _setup_xrf
    EPICS_COUNT_SETUP[3] = 1
    xrf_on
}'

def xrf_on '{
    if (EPICS_COUNT_SETUP[3] == 0){
        print "You must run setup_xrf"
    }else{ 
       if ($# ==0){
            _xrf_on
        } else {
            _xrf_on $1
        }
        EPICS_COUNT = 3;
        print "XRF_ON" 
    }
}'

def xrf_off '{
    EPICS_COUNT = 0;
    print "XRF_OFF" 
}'

###################################
## Setup for image detector (pilatus)

do_user_mac("cnt_macs/image_cnt.mac")

def setup_img '{
    _setup_img
    EPICS_COUNT_SETUP[4] = 1
    img_on
}'

def img_on '{
    if (EPICS_COUNT_SETUP[4] == 0){
        print "You must run setup_img"
    }else{ 
        if ($# ==0){
            _img_on
        } else {
            _img_on $1
        }
        EPICS_COUNT = 4;
        print "IMG_ON" 
    }
}'

def img_off '{
    EPICS_COUNT = 0;
    print "IMG_OFF"    
}'

###################################
## Setup for xrf_med counting
## use the epics_xrf_med count routine 
## replaced epics_med, no need for catcher program

do_user_mac("cnt_macs/xrf_med_cnt.mac")

def setup_xrf_med '{
    _setup_xrf_med
    EPICS_COUNT_SETUP[5] = 1
    xrf_med_on
}'

def xrf_med_on '{
    if (EPICS_COUNT_SETUP[5] == 0){
        print "You must run setup_xrf"
    }else{ 
       if ($# ==0){
            _xrf_med_on
        } else {
            _xrf_med_on $1
        }
        EPICS_COUNT = 5;
        print "XRF_MED_ON" 
    }
}'

def xrf_med_off '{
    EPICS_COUNT = 0;
    print "XRF_MED_OFF" 
}'

############################################################################
## user_getcounts   
## user_getcounts is called in the macro get_counts
## which is called from scan_count within the _loop macro 
## its used here to add an epics pv to the scalers
## Note this will only be used during point scans!
## ie its not called during traj scans
##
############################################################################
def user_getcounts '{
    local pv_roi, j, pv
    
    # using mca triggered from spec
    if (EPICS_COUNT == 1){
         S[roi1] = 0; S[roi2] = 0; S[roi3] = 0;
         # need this to wait for mca software to finish the calc
         sleep(.3)
         pv_roi = MCA_ROI_PV_NAME
         S[roi1] = epics_get(pv_roi)
         pv_roi = MCA_ROI_PV_NAME_2
         S[roi2] = epics_get(pv_roi)
         pv_roi = MCA_ROI_PV_NAME_3
         S[roi3] = epics_get(pv_roi)

    # using med count routine
    } else if( EPICS_COUNT == 2) {
         S[roi1] = 0; S[roi2] = 0; S[roi3] = 0;
         for(j=0;j<MED_NUM_DET;j++ ){
            #print "get roi"
            if( MED_BAD_DETS[j] != 1 ){
               pv = sprintf("%smca%d.%s",MED_PV,j+1,"R0")
               #pv = sprintf("%smca%d.%s",MED_PV,j+1,"R0N")
               S[roi1] = S[roi1] + epics_get(pv)

               pv = sprintf("%smca%d.%s",MED_PV,j+1,"R1")
               #pv = sprintf("%smca%d.%s",MED_PV,j+1,"R1N")
               S[roi2] = S[roi2] + epics_get(pv)

               pv = sprintf("%smca%d.%s",MED_PV,j+1,"R2")
               #pv = sprintf("%smca%d.%s",MED_PV,j+1,"R2N")
               S[roi3] = S[roi3] + epics_get(pv)
            }
         }

    # using xrf count routine
    } else if( EPICS_COUNT == 3 ) {
        S[roi1] = 0; S[roi2] = 0; S[roi3] = 0;
        # need this to wait for mca software to finish the calc
        sleep(.1)
        S[roi1] = 0; S[roi2] = 0; S[roi3] = 0;

        pv = sprintf("%s.%s",XRF_PV,"R0")    
        S[roi1] = S[roi1] + epics_get(pv)
         
        pv = sprintf("%s.%s",XRF_PV,"R1")
        S[roi2] = S[roi2] + epics_get(pv)

        pv = sprintf("%s.%s",XRF_PV,"R2")
        S[roi3] = S[roi3] + epics_get(pv)
     
    # using image_count routine  
    } else if ( EPICS_COUNT == 4 ) {
        S[iroi] = 0
        S[iroi] = epics_get(PILATUS_STATS_PV)
  
    # using xrf_med count routine
    } else if (EPICS_COUNT == 5) {
         S[roi1] = 0; S[roi2] = 0; S[roi3] = 0;
         for(j=0;j<XRF_NUM_DET;j++ ){
            #print "get roi"
            if( XRF_BAD_DETS[j] != 1 ){
               pv = sprintf("%smca%d.%s",XRF_MED_PV,j+1,"R0")
               S[roi1] = S[roi1] + epics_get(pv)

               pv = sprintf("%smca%d.%s",XRF_MED_PV,j+1,"R1")
               S[roi2] = S[roi2] + epics_get(pv)

               pv = sprintf("%smca%d.%s",XRF_MED_PV,j+1,"R2")
               S[roi3] = S[roi3] + epics_get(pv)
            }
         }
    }

}'

###########################################################################


###########################################################################
# replace ct from SPECD/standard.mac  
# this allows us to do custom couting using
# epics detectors etc...  
############################################################################
def ct '{
    
     # if using bench shutter open it before count
     if (USE_BENCH_SHUTTER == TRUE) bench_shutter(0)

     # use med count routine
     if (EPICS_COUNT == 2 ){
	  waitmove        
	  epics_med_count $*
          show_cnts

     # use xrf count routine
     } else if (EPICS_COUNT == 3 ){
        #XRF_WRITE_FILES = FALSE
	  waitmove
        epics_xrf_count $*
          show_cnts

     # use image count routine
     } else if (EPICS_COUNT == 4 ){
        #print "trigger pilatus"
	  waitmove
        epics_pilatus_count $*
        show_cnts
     
     # use xrf count routine
     } else if(EPICS_COUNT == 5 ){
        #XRF_WRITE_FILES = FALSE
	  waitmove
        epics_xrf_med_count $*
        show_cnts

     # Default use standard spec count method 
     } else {
        cdef("cleanup_once", "onp; show_cnts; offp; user_ct", "ct")
        waitmove
        count_em $*
        waitcount
        cdef("cleanup_once", "", "ct", "delete")
        onp; show_cnts; offp
        user_ct
     }

     # if using bench shutter close it after count
     if (USE_BENCH_SHUTTER == TRUE) bench_shutter(1)

}'

#########################################################################
# The loop macro, called by all the scans at each iteration
# added XRF_COUNT condition
def _loop '{
	local z,i,n

      # if its a point scan we need to get the counts
      # traj scans already has the counts so we can skip this
      # note if using bench shutter it gets toggled in traj_execute
      if (IS_TRAJ_SCAN == 0) {
	    if (!set_sim(-1) && _sleep) {
              do_sleep _sleep
	    }

          # if its a fake scan get the fake scan vals
          if (IS_FAKE_SCAN == 1){
             fake_scan_count _ctime

          # use med count routine
          }else if(EPICS_COUNT == 2){
             # if using bench shutter open it before count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(0)

             # do the count
             epics_med_count _ctime

             # if using bench shutter close it after count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(1)
		
          # use xrf count routine
	    }else if(EPICS_COUNT == 3){
             # if using bench shutter open it before count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(0)

             # do the count
             epics_xrf_count _ctime

             # if using bench shutter close it after count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(1)

          # use image count routine
	    }else if(EPICS_COUNT == 4){
             # if using bench shutter open it before count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(0)

             # do the count
             epics_pilatus_count _ctime

             # if using bench shutter close it after count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(1)

	  # use xrf med count routine
	    }else if(EPICS_COUNT == 5){
             # if using bench shutter open it before count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(0)

             # do the count
             epics_xrf_med_count _ctime

             # if using bench shutter close it after count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(1)

          # Default use standard spec count method 
          } else {

             measure0

             # if using bench shutter open it before count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(0)

             # do the count
             scan_count _ctime

             # if using bench shutter close it after count
             if (USE_BENCH_SHUTTER == TRUE) bench_shutter(1)

             measure1
             measure2

          }
      }

	z = _ctime < 0? sec:MON
	T_AV += DEGC;
	if (z >= 0)
		MT_AV += S[z]
	s = sprintf("%3d %s%8.0f ", NPTS,VPRNT,S[DET])

	tty_cntl("resized?")
	n = int((COLS - length(VPRNT) - length(Pout) - 24) / 9)
	if (MON >= 0) {
		s = s sprintf("%8.0f ", S[MON])
		n--
	}
	s = s sprintf("%10.6g ",S[sec])

	for (i=0; i<COUNTERS && n>0; i++) {
		if (i!=DET && i !=MON && i!=sec && is_using_counter(i)) {
			s = s sprintf("%8.4g ", S[i])
			n--
		}
	}

	printf("%s%s\n",s,Pout)

	ifp 
      {
		fprintf(PRINTER,"%3d %s %8.6g ", NPTS,_hkl_val11,S[sec])
		if (MON >= 0)
			fprintf(PRINTER,"%8.0f ", S[MON])
		fprintf(PRINTER,"%8.0f %s%s\n", S[DET],PPRNT,Pout)
	}
      # 
      # print data
      # 
	if (DATAFILE != "") {
		fprintf(DATAFILE,"%s%s%d",FPRNT,Fout,(TIME_END=time())-EPOCH)


		for (i=0;i<COUNTERS;i++)
			if (i != z && i != DET && is_using_counter(i))
				fprintf(DATAFILE," %g",S[i])

		if (z >= 0)
			fprintf(DATAFILE," %g",S[z])
		fprintf(DATAFILE," %g\n",S[DET]);
	}
      user_scan_loop
}'
#########################################################################


############################################################################
# Add stuff to data files
# (see pg 149 in spec manual)
# the Fheader increments _cols for number of output cols in _loop
# and puts the #X_ ... into the scan header
# Flabel and Fout put extra info into the data cols in _loop 

def Fheader  '_cols = _cols+2; 
              if(IS_ROD_SCAN) printf("%s\n", RS_SCAN_TITLE);
              printf("#ATTEN %d %d %d %d\n", ATTEN[0], ATTEN[1], ATTEN[2], ATTEN[3] );
              printf("#ALP_BET %g %g\n", ALPHA, BETA);
              printf("#ENERGY %g\n", 12398.4244/LAMBDA);
             '
###
###  Hack 3-20-03, T2
###
def Flabel  '"Alpha  Beta  "'
def Fout  'sprintf("%7.5g  %7.5g  ", ALPHA, BETA)' 
 
# def Flabel  '"icr1  icr2  icr3  icr4  "'
# def Fout 'sprintf("%7.5g  %7.5g  %7.5g  %7.5g  ", ICR_ARRAY[0], ICR_ARRAY[1],ICR_ARRAY[2],ICR_ARRAY[3])'


############################################################################

#########################################################################
#
# The head macro, called by all the scans. at the start of the scan....
# ie this initializes the scan data and prints the header etc....
#
def _head '
	user_prescan_head
	_scan_time
#PJE nov 14 2010: update the ATTEN global so that it is correct in the spec file
     check_atten

      # see if this is a fake scan
      if (IS_FAKE_SCAN == 1){
         # if it is a fake scan see if the motors are really moving
         if ( FS_MOVE == 1) {
              # if yes get the current positions and HKL
              waitall; get_angles; calcHKL
          }
       # if its not a fake scan get the current positions and HKL
       } else {
         waitall; get_angles; calcHKL
       }

	NPTS = T_AV = MT_AV = 0
	DATE = date()
	TIME = TIME_END = time()
	_cp = A[_pmot]
	cdef("cleanup_once", "_scanabort;", "scan_cleanup")

	# DATA FILE HEADER
	if (DATAFILE != "") {
		local i,j,z,s
		ond; offt
		printf("\n#S %d  %s\n#D %s\n",++SCAN_N,HEADING,DATE)
		if (_ctime < 0)
			printf("#M %g  (%s)\n", -_ctime, cnt_name(MON))
		else
			printf("#T %g  (%s)\n", _ctime, cnt_name(sec))

 
           # T2 print out the geometry data in the scan header
           # added the UB and Q arrays to the output    
		_head_par G 0
		_head_par U 1
            _head_par UB 3
            _head_par Q 4

		printf("#Q %s\n", _hkl_val)

		for (i=0; i<MOTORS; i+= 8) {
			s = sprintf("#P%d ",i/8)
			for (j=i; j<i+8 && j<MOTORS;) {
				if (motor_name(mA[j]) != "unused")
					s = s sprintf("%.8g", A[mA[j]])
				if (j%8 == 7)
					break
				s = s " "
				j++
			}
			print s
		}
		Fheader
		user_Fheader
		z = _ctime < 0? sec:MON
		for (i=j=0;i<COUNTERS;i++)
			if (i != z && i != DET && is_using_counter(i))
				j++
		printf("#N %d\n", _cols + (MON<0? 2:3) + j)
		_cols = 0
		printf("#L %s%sEpoch",FPRNT,Flabel)
            
		for (i=0;i<COUNTERS;i++)
			if (i != z && i != DET && is_using_counter(i))
				printf("  %s",cnt_name(i))
		if (z >= 0)
			printf("  %s",cnt_name(z))
		printf("  %s\n",cnt_name(DET))
		offd; ont
	} else {
		SCAN_N++
      }
	T_L = sprintf("Scan %d", SCAN_N)

	# PRINTER HEADER
      ifp 
      {
		local i, j, k, s
		onp; offt
		printf("\n")
		formfeed
		printf("\nScan %3d   %s   file = %s  %s  user = %s\n",\
			SCAN_N,DATE,DATAFILE,TITLE,USER)
		printf("%s\n\n",HEADING)
		for (i=0; i<MOTORS; i+=8) {
			s = "  "
			for (j=i; j<i+8 && j<MOTORS;) {
				if (is_using_motor(mA[j]))
					s = s sprintf("%9.9s", motor_name(mA[j]))
				if (j%8 == 7)
					break
				s = s " "
				j++
			}
			print s
			s = "  "
			for (j=i; j<i+8 && j<MOTORS;) {
				if (is_using_motor(mA[j]))
					s = s sprintf("%9.6g ", A[mA[j]])
				if (j%8 == 7)
					break
				s = s " "
				j++
			}
			print s
		}
		Pheader
		user_Pheader
		printf("\n  # %s %8.8s ", _hkl_sym11,cnt_name(sec))
		if (MON >= 0)
			printf("%8.8s ", cnt_name(MON))
		printf("%8.8s %s%s\n", cnt_name(DET),PPRNT,Plabel)
		offp; ont
	}
	# TTY HEADER
	{
		local i, n, s

		if (DATAFILE == "/dev/null" || DATAFILE == "null")
			s = "**NO DATA FILE**"
		else
			s = sprintf("file = %s", DATAFILE)
		printf("\nScan %3d   %s   %s  %s  user = %s\n%s\n\n",\
			SCAN_N,DATE,s,TITLE,USER,HEADING)
		s = sprintf("  # %s%8.8s ", VPRNT,cnt_name(DET))

		tty_cntl("resized?")
		n = int((COLS - length(VPRNT) - length(Plabel) - 24) / 9)
		if (MON >= 0) {
			s = s sprintf("%8.8s ",cnt_name(MON))
			n--
		}
		s = s sprintf("%10.10s ",cnt_name(sec))

		for (i=0; i<COUNTERS && n>0; i++) {
			if (i!=DET && i !=MON && i!=sec && is_using_counter(i)) {
				s = s sprintf("%8.8s ", cnt_name(i))
				n--
			}
		}
		printf("%s%s\n",s,Plabel)
	}
	user_postscan_head
'

#########################################################################


############################################################################
## expanded this macro so it shows name and mne (vs _mot in standard.mac)
#
# show current (geometry) motor postions, only user units
def _mot '{
	local s[]
	s[0] = "name"
      s[1] = "mne"
	s[2] = "user"
	show_motor_info(s, 3, $#==1? $1:MOTORS)
}'
############################################################################


############################################################################
#### changed below macro from standard.mac to display 9 motors per line  
#### and add a newline between them
#
# Internal macro used to display motor information at 8 motors per line.
# Listing of motors named "unused" or that are disabled is suppressed.
# First argument is array of info-types as "name", "mne", "user",
# "dial", "lim+", "lim-", "ulim+" and "ulim-".  Second argument
# is number of elements in array.  Third argument is number of motors.
# If first argument is a single string as above, that is okay.
def show_motor_info(f, ns, n) '{
    local i, j, k, m, s[], t
    for (i=0; i<n && i<MOTORS; i++) {
	for (k=0;k<ns;k++)
	    s[k]=""
	for (j=0; i<n && i<MOTORS; i++) {
	    if (!is_using_motor(mA[i]))
		continue;
	    for (k=0;k<ns;k++) {
		m = mA[i]
		t = (whatis("f")&0x01000000)? f[k]:f
		if (t =="name")
		    s[k] = s[k] sprintf("%9.9s", motor_name(m))
		else if (t == "mne")
		    s[k] = s[k] sprintf("%9.9s", motor_mne(m))
		else if (t == "user")
		    s[k] = s[k] sprintf("%9.4f", A[m])
		else if (t == "dial")
		    s[k] = s[k] sprintf("%9.4f", dial(m, A[m]))
		else if (t == "lim+")
		    s[k] = s[k] sprintf("%9.4f", get_lim(m, +1))
		else if (t == "ulim+")
		    s[k] = s[k] sprintf("%9.4f", user(m, get_lim(m, +1)))
		else if (t == "lim-")
		    s[k] = s[k] sprintf("%9.4f", get_lim(m, -1))
		else if (t == "ulim-")
		    s[k] = s[k] sprintf("%9.4f", user(m, get_lim(m, -1)))
	    }
	    if (j%9 == 8)
		break
	    for (k=0;k<ns;k++)
		s[k] = s[k] " "
	    j++
	}
	#for (k=0;k<ns;k++)
	#    p s[k] 
      for (k=0;k<ns;k++){
	    p s[k]
      }
      p "\n" 
    }
}'
############################################################################

############################################################################
# lup2
#

def lup2 '
        if ($# != 5) {
                eprint "Usage:  lup motor start finish intervals time"
                exit
        } 
        dscan $*      
        sc_an
  
  if (SC_AN_FWHM != 0){
       mv $1 SC_AN_CEN ;
       p "Moving motor to " SC_AN_CEN;
  }

'
############################################################################
############################################################################
# round a floating number
#
def round(x) '{
        if ((x - int(x)) < .5) {
           x = int(x) 
        } else {
          x = int(x) + 1
        }
	  return(x)  
     
  

}'
############################################################################

############################################################################
# En_scan
# just calls Escan but takes start and stop in ev....
#

def Enscan '
        if ($# != 4) {
                eprint "Usage:  Enscan start finish intervals time"
                eprint " energies in eV"
                exit
        } 
        getE;
        lam1 = LAMBDA;
        Escan $1/1000 $2/1000 $3 $4;
        moveE hc_over_e/lam1;
        getE;      
  
 
'
############################################################################

