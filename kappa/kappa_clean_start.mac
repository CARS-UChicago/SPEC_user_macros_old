# kappa_clean_start macro.
# start spec with  >>kappa -f
# then run this macro to set initial params.
# note this is kappa specific!!!!!

PRINTER="/dev/null"
DATAFILE="setup.spc"
################### set kappa parameters (Q array)  ##############################
# These are recalc when do a calcHKL (or calc(2)).
H=0.0			# Q[0], H coord
K=0.0			# Q[1], K coord
L=0.0			# Q[2], L coord
LAMBDA=1.54 	# Q[3], Wavelength (only recalculated if have a mono motor defined)
ALPHA=0		# Q[4], Angle between the reference vector and the xz-plane (incidence angle) 
BETA=0		# Q[5], Exit angle when the reference vector is the surface normal
OMEGA=0		# Q[6], Angle btwn Q and the plane perpendicular to the chi axis
AZIMUTH=0		# Q[7], Rotation angle of the surface normal about Q

# Values for the frozen angles, 
F_ALPHA=0		# Q[8], Frozen value of ALPHA for alpha-fixed mode.
F_BETA=0		# Q[9], Frozen value of BETA for beta-fixed mode
F_OMEGA=0		# Q[10], Frozen value of OMEGA for omega-fixed mode
F_AZIMUTH=0		# Q[11], Frozen value of AZIMUTH for AZIMUTH-fixed mode
F_PHI=0		# Q[12], Frozen value of A[phi] for phi-fixed mode
F_CHI_Z=0		# Q[13], Value calculated for A[chi] in zone mode
F_PHI_Z=0		# Q[14], Value calculated for A[phi] in zone mode

# Cut points for the axis
CUT_AZI=0		# Q[15], Azimuthal cut point flag
CUT_TTH=-180	# Q[16], Cut point for tth circle
CUT_TH=-180		# Q[17], Cut point for th circle = CUT_OM
CUT_CHI=-180	# Q[18], Cut point for chi circle
CUT_PHI=-180	# Q[19], Cut point for phi circle
CUT_KTH=-180	# Q[20], Cut point for keta circle
CUT_KAP=-180	# Q[21], Cut point for kap circle
CUT_KPHI=-180	# Q[22], Cut point for kphi circle
CUT_CHIR=-180	# Q[23], Cut point for chir?
CUT_PHIR=-180	# Q[24], Cut point for phir?

################### set kappa parameters (G array)  ##############################
# sector preference flags
g_mode=5		# G[0], Holds geomerty mode value, set to ALPHA fixed 
g_sect=0	      # G[1], Holds sector mode. 0-7, 
g_frz=1	      # G[2], Nonzero when frozen mode is on. 
			#       ie use the values in the F_... vars for angle constraints
			#       if this is zero it just uses the current values
# reference vector
g_haz=0		# G[3], H of reference vector
g_kaz=0		# G[4], K of reference vector
g_laz=1		# G[5], L of reference vector
# zone vectors
g_zh0=0		# G[6], H of first zone mode vector
g_zk0=0		# G[7], K of first zone mode vector
g_zl0=0		# G[8], L of first zone mode vector
g_zh1=0		# G[9], H of second zone mode vector
g_zk1=0		# G[10], K of second zone mode vector
g_zl1=0		# G[11], L of second zone mode vector
#
g_kappa = 50.031  # G[12], Kappa tilt angle
g_vmode=0		# G[13], set to 1 for vertical mode
g_picker=0.1	# G[14], picker mode factor?

################### set lattice and orientation parameters (U array)  ##############################
# lattice parameters
g_aa=1.54		# U[0], real-space a
g_bb=1.54		# U[1], real-space b
g_cc=1.54		# U[2], real-space c
g_al=90		# U[3], real-space alpha
g_be=90		# U[4], real-space beta
g_ga=90		# U[5], real-space gamma
g_aa_s=4.07999	# U[6], recip-space a* (x 2pi)
g_bb_s=4.07999	# U[7], recip-space b* (x 2pi)
g_cc_s=4.07999	# U[8], recip-space c* (x 2pi)
g_al_s=90		# U[9], recip-space alpha* 
g_be_s=90		# U[10], recip-space beta* 
g_ga_s=90		# U[11], recip-space gamma*

# orientation
# these settings define a unit orientation matrix.  
# Therefore, the azimuth vector (001) points along the 
# diffractometer Z-axis for all angles = 0. 
   
# reflections
# or0
g_h0=1		#  U[12], h
g_k0=0		#  U[13], k
g_l0=0		#  U[14], l
# or1
g_h1=1		#  U[15], h
g_k1=0		#  U[16], k
g_l1=1		#  U[17], l

# angle settings
# or0
g_u00=60		#  U[18], tth = tth0
g_u01=30		#  U[19], th  = th0 = om0
g_u02=0 		#  U[20], chi  = chi0
g_u03=0		#  U[21], phi = phi0
g_u04=0		#  U[22], not-used
g_u05=0		#  U[23], not-used
# or1
g_u10=90		#  U[24], tth= tth1
g_u11=45		#  U[25], th = th1
g_u12=45		#  U[26], chi= chi1
g_u13=0		#  U[27], phi = phi1
g_u14=0		#  U[28], not-used
g_u15=0		#  U[29], not-used
   
# lambdas for or's
g_lambda0=1.54	#  U[30], lambda or0 
g_lambda1=1.54	#  U[31], lambda or1
   
########################################################################
# recalc the orientation matrix (UB) and current posiiton using 
# the above set of numbers, note that LAMBDA = 1.54, ie may not be correct!
calcG			# calc(4) in geo code calc UB
calcHKL		# calc where we are from current motor settings (in A matrix)
			# this is calc(2) in geo code
# show where we are 
wa
wh

########################################################################
# Run specs startup macro
# This calls the macros:
# newsample, setscans, setplot, startgeo, setmono
# 
startup

########  set mono params ###########
# Get LAMBDA based on current mono angle
# Note this only works if mono is defined as a motor
# Also note that the mono parameters are kept in the file:
# SPECD/mono_settings
# For the si(111) mon the d-spacing should be
# g_mo_d=3.13555	# mono d-spacing

getE		# this updates LAMBDA (note that UB doesnt depend on LAMBDA)
calcHKL	# recalc our current HKL etc using updated LAMBDA			

#####################################
# also select what your counters are
# and what you want to plot
printf("\n(counters)")
MON = 0
DET = 3
counters

printf("\n(plotselect)\n")
PLOT_SEL[0] = cnt_mne(DET)
plotselect

printf("\n(atten_setup)\n")
atten_setup

